{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","redux/ContactForm/ContactForm-actions.js","redux/ContactForm/ContactForm-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","addContact","createAction","payload","name","number","id","genId","deleteContact","filterChange","itemsReducer","createReducer","actions","state","find","contact","alert","filter","filterReducer","_","contactsReducer","combineReducers","items","contactsPersistConfig","key","storage","blacklist","rootReducer","contacts","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","persistor","persistStore","ContactForm","reset","setState","handleChange","event","preventDefault","currentTarget","value","currentState","updateState","handleSubmit","props","onSubmit","nameInputId","telInputId","this","className","styles","contactForm","htmlFor","labelForm","type","onChange","inputForm","buttonForm","Component","connect","dispatch","Filter","filterInputId","filterState","onFilterChange","labelFilter","inputFilter","target","ContactListItem","onDeleteContact","listItem","onClick","buttonListItem","ContactList","contactsList","map","contactList","getContactsToShow","normalizedFilter","toLowerCase","includes","contactId","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.3d0546a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__1IuJX\",\"labelForm\":\"ContactForm_labelForm__xttIX\",\"inputForm\":\"ContactForm_inputForm__3sm9d\",\"buttonForm\":\"ContactForm_buttonForm__1STab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelFilter\":\"Filter_labelFilter__2pzAg\",\"inputFilter\":\"Filter_inputFilter__1vqpK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__17kFs\",\"buttonListItem\":\"ContactListItem_buttonListItem__1e2PL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1oLsN\"};","// import types from './ContactForm-types';\r\nimport { v4 as genId } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n// const addContact = ({ name, number, id }) => {\r\n//   return {\r\n//     type: types.ADD_CONTACT,\r\n//     payload: { name, number, id: genId() },\r\n//   };\r\n// };\r\n\r\nconst addContact = createAction(\r\n  'ContactForm/AddContact',\r\n  ({ name, number }) => {\r\n    return { payload: { name, number, id: genId() } };\r\n  },\r\n);\r\n\r\n// const deleteContact = contactId => {\r\n//   return { type: types.DELETE_CONTACT, payload: contactId };\r\n// };\r\n\r\nconst deleteContact = createAction('ContactForm/DeleteContact');\r\n\r\n// const filterChange = value => {\r\n//   return {\r\n//     type: types.FILTER_CHANGE,\r\n//     payload: value,\r\n//   };\r\n// };\r\n\r\nconst filterChange = createAction('ContactForm/FilterChange');\r\n\r\nexport default { addContact, deleteContact, filterChange };\r\n","import { combineReducers } from 'redux';\r\n// import types from './ContactForm-types';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './ContactForm-actions';\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD_CONTACT:\r\n//       if (state.find(contact => contact.name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts.`);\r\n//         return state;\r\n//       }\r\n//       return [...state, payload];\r\n//     case types.DELETE_CONTACT:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const findContact = (state, payload) => {\r\n//   if (state.find(contact => contact.name === payload.name)) {\r\n//     alert(`${payload.name} is already in contacts.`);\r\n//     return state;\r\n//   }\r\n// };\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    if (state.find(contact => contact.name === payload.name)) {\r\n      alert(`${payload.name} is already in contacts.`);\r\n      return state;\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER_CHANGE:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.filterChange]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n","// import { combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './ContactForm/ContactForm-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n// import persistReducer from 'redux-persist/es/persistReducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\nconst rootReducer = {\r\n  contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import { Component } from 'react';\r\nimport { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/ContactForm/ContactForm-actions';\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: '', number: '' };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  handleChange = event => {\r\n    event.preventDefault();\r\n    const { name, value } = event.currentTarget;\r\n    const currentState = this.state;\r\n    const updateState = { [name]: value };\r\n    this.setState({ ...currentState, ...updateState });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    const nameInputId = genId();\r\n    const telInputId = genId();\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.contactForm}>\r\n        <label htmlFor={nameInputId} className={styles.labelForm}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id={nameInputId}\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            className={styles.inputForm}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={telInputId} className={styles.labelForm}>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            id={telInputId}\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            className={styles.inputForm}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.buttonForm}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(actions.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { Component } from 'react';\r\nimport { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/ContactForm/ContactForm-actions';\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    const filterInputId = genId();\r\n    const { filterState, onFilterChange } = this.props;\r\n    return (\r\n      <label htmlFor={filterInputId} className={styles.labelFilter}>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          id={filterInputId}\r\n          value={filterState}\r\n          onChange={onFilterChange}\r\n          className={styles.inputFilter}\r\n        />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filters: PropTypes.string,\r\n  onFilterChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filterState: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onFilterChange: event => dispatch(actions.filterChange(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ name, number, id, onDeleteContact }) => {\r\n  return (\r\n    <li id={id} className={styles.listItem}>\r\n      {name}: {number}\r\n      <button\r\n        onClick={() => {\r\n          onDeleteContact(id);\r\n        }}\r\n        className={styles.buttonListItem}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n  onDeleteContact: PropTypes.func,\r\n};\r\nexport default ContactListItem;\r\n","import { Component } from 'react';\r\nimport ContactListItem from './ContactListItem/ContactListItem';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/ContactForm/ContactForm-actions';\r\n\r\nclass ContactList extends Component {\r\n  render() {\r\n    const { contactsList, onDeleteContact } = this.props;\r\n    return (\r\n      <ul>\r\n        {contactsList.map(({ name, number, id }) => {\r\n          return (\r\n            <ContactListItem\r\n              name={name}\r\n              number={number}\r\n              key={id}\r\n              id={id}\r\n              onDeleteContact={onDeleteContact}\r\n              className={styles.contactList}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getContactsToShow = ({ filter, items }) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return items.filter(({ name }) =>\r\n    name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsList: getContactsToShow(state.contacts),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: contactId => dispatch(actions.deleteContact(contactId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { Component } from 'react';\nimport './App.css';\n// import { v4 as genId } from 'uuid';\n\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n  // componentDidMount() {\n  //   const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(_, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}